-- lua/plugins/LSP.lua
return {
	{
		"williamboman/mason.nvim",
		build = ":MasonUpdate",
		config = true,
	},

	{
		"williamboman/mason-lspconfig.nvim",
		dependencies = { "neovim/nvim-lspconfig" },
		config = function()
			require("mason-lspconfig").setup({
				ensure_installed = { "lua_ls", "pyright", "tsserver" },
				automatic_installation = true,
			})

			vim.diagnostic.config({
				virtual_text = { prefix = "‚óè", spacing = 2 },
				signs = true,
				underline = true,
				update_in_insert = false,
				severity_sort = true,
				float = { border = "rounded", source = "always" },
			})

			require("mason-lspconfig").setup_handlers({
				function(server_name)
					require("lspconfig")[server_name].setup({
						capabilities = require("blink.cmp").get_lsp_capabilities(),
						on_attach = function(_, bufnr)
							local map = function(mode, lhs, rhs)
								vim.keymap.set(mode, lhs, rhs, { buffer = bufnr })
							end
							map("n", "gd", vim.lsp.buf.definition)
							map("n", "K", vim.lsp.buf.hover)
							map("n", "gi", vim.lsp.buf.implementation)
							map("n", "<leader>rn", vim.lsp.buf.rename)
							map("n", "<leader>ca", vim.lsp.buf.code_action)
							map("n", "gr", vim.lsp.buf.references)
							map("n", "[d", vim.diagnostic.goto_prev)
							map("n", "]d", vim.diagnostic.goto_next)
							map("n", "<leader>e", vim.diagnostic.open_float)
							map("n", "<leader>q", vim.diagnostic.setloclist)
						end,
					})
				end,
			})
		end,
	},

	{
		-- Blink replaces nvim-cmp
		"saghen/blink.cmp",
		event = "InsertEnter",
		dependencies = {
			{ "hrsh7th/nvim-cmp", enabled = false },
			{ "hrsh7th/cmp-nvim-lsp", enabled = false },
			{ "hrsh7th/cmp-buffer", enabled = false },
			{ "hrsh7th/cmp-path", enabled = false },
			-- Add snippets support
			{ "rafamadriz/friendly-snippets" },
			{ "garymjr/nvim-snippets" }, -- makes friendly-snippets work with Blink
		},
		config = function()
			local blink = require("blink.cmp")

			blink.setup({
				windows = {
					completion = { border = "rounded", scrollbar = true },
					documentation = { border = "rounded" },
				},
				highlights = {
					completion = {
						winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None",
					},
					documentation = {
						winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,Search:None",
					},
				},
				keymap = {
					preset = "default",
					["<CR>"] = blink.mapping.confirm({ select = true }),
					["<Tab>"] = blink.mapping.select_next(),
					["<S-Tab>"] = blink.mapping.select_prev(),
					["<C-Space>"] = blink.mapping.complete(),
				},
			})
		end,
	},
}
